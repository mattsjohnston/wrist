{"mtime":1383024732,"js":"(function() {\n  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  $(function() {\n    var $signupForm, offsets, toggleVisibleWatches, watches;\n    $(document).foundation();\n    if (Modernizr.is_mobile) {\n      defer(function() {\n        return window.scrollTo(0, 1);\n      });\n    }\n    $signupForm = $('#signup-form');\n    $signupForm.find('input').focus(function(e) {\n      $signupForm.addClass('focusing');\n      return $signupForm.find('button').html('Sign me up!');\n    });\n    $signupForm.find('input').blur(function(e) {\n      $signupForm.removeClass('focusing');\n      return $signupForm.find('button').html('Get the Newsletter');\n    });\n    watches = {};\n    watches.weekender = $('#weekender .svg-main').clocker();\n    watches.no1 = $('#no1 .svg-main').clocker();\n    watches.bn0032 = $('#bn0032 .svg-main').clocker();\n    watches.normal = $('#normal .svg-main').clocker({\n      hourIndicator: '.hour-indicator, .hour-shadow',\n      secondIndicator: '.second-indicator, .second-shadow',\n      minuteIndicator: '.minute-indicator, .minute-shadow'\n    });\n    watches.polygon = $('#polygon .svg-main').clocker({\n      dateMultiplier: -1\n    });\n    watches.f91w = $('#f91w .svg-main').clocker({\n      analog: false,\n      digital: true\n    });\n    offsets = {\n      local: false,\n      london: 1,\n      paris: 2,\n      sanfrancisco: -7\n    };\n    toggleVisibleWatches = function() {\n      return $.each(watches, function(i, watch) {\n        if (watch.$container.visible(true)) {\n          if (watch.playState !== 'playing') {\n            return watch.play(false);\n          }\n        } else if (watch.playState !== 'paused') {\n          return watch.pause();\n        }\n      });\n    };\n    toggleVisibleWatches();\n    $(document).on('scroll', toggleVisibleWatches);\n    $('.timezones li a').click(function(e) {\n      var $el, city;\n      e.preventDefault();\n      $el = $(e.target);\n      $el.parents('.timezones').find('li').removeClass('current');\n      $el.parent().addClass('current');\n      city = $el.attr('href').split('#')[1];\n      return $.each(watches, function(i, watch) {\n        watch.setOffset(offsets[city]);\n      });\n    });\n    return $('.al').click(function(e) {\n      var anchor;\n      e.preventDefault;\n      anchor = $(e.target).attr('href');\n      $.scrollTo($(anchor).offset().top, 1000);\n      return false;\n    });\n  });\n\n  (function($) {\n    var Clocker, defer;\n    Clocker = (function() {\n      function Clocker(elements, options) {\n        this.elements = elements;\n        this.options = options;\n        this.getTime = __bind(this.getTime, this);\n        this.getRawTime = __bind(this.getRawTime, this);\n        this.updateTimeAnalog = __bind(this.updateTimeAnalog, this);\n        this.updateMeridiem = __bind(this.updateMeridiem, this);\n        this.updateTimeDigital = __bind(this.updateTimeDigital, this);\n        this.updateTime = __bind(this.updateTime, this);\n        this.pause = __bind(this.pause, this);\n        this.playAnalog = __bind(this.playAnalog, this);\n        this.playDigital = __bind(this.playDigital, this);\n        this.play = __bind(this.play, this);\n        this.setOffset = __bind(this.setOffset, this);\n        this.init();\n        this.$ = this.elements;\n      }\n\n      Clocker.prototype.hourLoop = false;\n\n      Clocker.prototype.minuteLoop = false;\n\n      Clocker.prototype.secondLoop = false;\n\n      Clocker.prototype.localOffset = (new Date()).getTimezoneOffset() / -60;\n\n      Clocker.prototype.offsetTimezone = false;\n\n      Clocker.prototype.isAnimatingHands = false;\n\n      Clocker.prototype.isAnimatingDigital = false;\n\n      Clocker.prototype.updateTimer = null;\n\n      Clocker.prototype.oldTime = new Date((new Date()).setHours(0, 0, 0));\n\n      Clocker.prototype.firstPlay = true;\n\n      Clocker.prototype.init = function() {\n        var settings,\n          _this = this;\n        settings = {\n          dayIndicator: '.day-indicator',\n          dateIndicator: '.date-indicator',\n          hourIndicator: '.hour-indicator',\n          minuteIndicator: '.minute-indicator',\n          secondIndicator: '.second-indicator',\n          dateMultiplier: 1,\n          hourMultiplier: 1,\n          minuteMultiplier: 1,\n          secondMultiplier: 1,\n          analog: true,\n          digital: false,\n          militaryTime: false\n        };\n        this.settings = $.extend(settings, this.options);\n        return this.elements.each(function(i, el) {\n          var $el;\n          _this.$ = $el = $(el);\n          _this.$container = _this.$.parent();\n          _this.$dayIndicator = $el.find(settings.dayIndicator);\n          _this.$dateIndicator = $el.find(settings.dateIndicator);\n          _this.$hourIndicator = $el.find(settings.hourIndicator);\n          _this.$minuteIndicator = $el.find(settings.minuteIndicator);\n          _this.$secondIndicator = $el.find(settings.secondIndicator);\n          return _this.play();\n        });\n      };\n\n      Clocker.prototype.setOffset = function(offset) {\n        if (this.offsetTimezone !== offset && (offset || this.offsetTimezone !== this.localOffset)) {\n          this.oldTime = this.getRawTime();\n          this.offsetTimezone = offset;\n          return this.play();\n        }\n      };\n\n      Clocker.prototype.play = function(longTransition) {\n        if (longTransition == null) {\n          longTransition = true;\n        }\n        clearTimeout(this.updateTimer);\n        if (this.settings.analog) {\n          this.playAnalog(longTransition);\n        }\n        if (this.settings.digital) {\n          this.playDigital(longTransition);\n        }\n        return this.firstPlay = false;\n      };\n\n      Clocker.prototype.playDigital = function(longTransition) {\n        if (longTransition) {\n          this.playState = 'playing';\n          return this.animateDigital(this.oldTime);\n        } else {\n          return this.updateTime();\n        }\n      };\n\n      Clocker.prototype.animateDigital = function(startTime, callback) {\n        var diff, duration, endDate, endDay, endHours, endMinutes, endSeconds, finished, interval, negative, newTime, startDate, startDay, startHours, startMinutes, startSeconds, stepAnimate,\n          _this = this;\n        duration = 3500;\n        interval = 30;\n        newTime = this.getRawTime();\n        finished = 0;\n        this.isAnimatingDigital = true;\n        callback = function() {\n          _this.isAnimatingDigital = false;\n          return _this.updateTime();\n        };\n        stepAnimate = function(current_time, start_value, end_value, total_time, step) {\n          var currentVal;\n          currentVal = Math.round(start_value + (end_value - start_value) * jQuery.easing.easeInOutExpo(null, current_time, 0, 1, total_time));\n          step(currentVal);\n          if (current_time > total_time) {\n            finished++;\n            if (finished >= 3) {\n              callback();\n            }\n            return;\n          }\n          return setTimeout((function() {\n            return stepAnimate(current_time + interval, start_value, end_value, total_time, step);\n          }), interval);\n        };\n        diff = newTime - startTime + duration;\n        negative = diff < 0;\n        startDay = startTime.getDay() * !this.firstPlay + 7 * negative;\n        endDay = newTime.getDay() + 7 * !negative;\n        startDate = startTime.getDate() * !this.firstPlay;\n        endDate = newTime.getDate();\n        startHours = startTime.getHours() + 24 * negative;\n        endHours = startHours + Math.floor(diff / (60 * 60 * 1000));\n        startMinutes = startTime.getMinutes() + 12 * 60 * negative;\n        endMinutes = startMinutes + Math.floor(diff / (60 * 1000));\n        startSeconds = startTime.getSeconds() + 12 * 60 * 60 * negative;\n        endSeconds = startSeconds + (Math.floor(diff / 1000) % 60) + (endMinutes - endMinutes % 60) + 480;\n        stepAnimate(0, startDay, endDay, duration, function(val) {\n          return _this.updateIndicatorDigital(_this.$dayIndicator, _this.dayNames[val % 7]);\n        });\n        stepAnimate(0, startDate, endDate, duration, function(val) {\n          return _this.updateIndicatorDigital(_this.$dateIndicator, val);\n        });\n        stepAnimate(0, startHours, endHours, duration, function(val) {\n          _this.updateMeridiem(val);\n          return _this.updateIndicatorDigital(_this.$hourIndicator, val % 12 || 12);\n        });\n        stepAnimate(0, startMinutes, endMinutes, duration, function(val) {\n          return _this.updateIndicatorDigital(_this.$minuteIndicator, val % 60);\n        });\n        return stepAnimate(0, startSeconds, endSeconds, duration, function(val) {\n          return _this.updateIndicatorDigital(_this.$secondIndicator, val % 60);\n        });\n      };\n\n      Clocker.prototype.playAnalog = function(longTransition) {\n        var events,\n          _this = this;\n        this.playState = 'playing';\n        this.isAnimatingHands = false;\n        if (longTransition) {\n          this.$hourIndicator.add(this.$minuteIndicator).add(this.$dateIndicator).addClass('long-transition');\n        }\n        defer(function() {\n          _this.updateTime();\n          return _this.isAnimatingHands = true;\n        });\n        events = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend';\n        this.$minuteIndicator.unbind(events);\n        return this.$minuteIndicator.bind(events, function() {\n          _this.isAnimatingHands = false;\n          _this.$hourIndicator.add(_this.$minuteIndicator).removeClass('long-transition');\n          return _this.$minuteIndicator.unbind(events);\n        });\n      };\n\n      Clocker.prototype.pause = function() {\n        clearTimeout(this.updateTimer);\n        return this.playState = 'paused';\n      };\n\n      Clocker.prototype.updateTime = function() {\n        var time,\n          _this = this;\n        time = this.getTime();\n        if (this.settings.analog) {\n          this.updateTimeAnalog(time);\n        }\n        if (this.settings.digital) {\n          this.updateTimeDigital(time);\n        }\n        return this.updateTimer = setTimeout((function() {\n          return _this.updateTime();\n        }), 200);\n      };\n\n      Clocker.prototype.updateTimeDigital = function(time) {\n        var _this = this;\n        if (!this.isAnimatingDigital) {\n          return $.each(time, function(key, val) {\n            var $indicator, value;\n            $indicator = _this[\"$\" + key + \"Indicator\"];\n            if (key === 'day') {\n              value = _this.dayNames[val.val];\n            } else {\n              value = val.val;\n            }\n            return _this.updateIndicatorDigital($indicator, value);\n          });\n        }\n      };\n\n      Clocker.prototype.updateMeridiem = function(hour) {\n        var newMeridiem;\n        this.$.removeClass('meridiem-am meridiem-pm');\n        newMeridiem = Math.floor(hour / 12) % 2 === 0 ? 'am' : 'pm';\n        return this.$.addClass(\"meridiem-\" + newMeridiem);\n      };\n\n      Clocker.prototype.updateIndicatorDigital = function($indicator, val) {\n        var className, _i, _len, _ref;\n        _ref = $indicator.attr('class').split(' ');\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          className = _ref[_i];\n          if (className.match(/digit-val-.+/)) {\n            $indicator.removeClass(className);\n          }\n        }\n        return $indicator.addClass(\"digit-val-\" + val);\n      };\n\n      Clocker.prototype.updateTimeAnalog = function(time) {\n        var _this = this;\n        return $.each(time, function(key, val) {\n          var $indicator, degree, multiplier;\n          $indicator = _this[\"$\" + key + \"Indicator\"];\n          multiplier = _this.settings[\"\" + key + \"Multiplier\"];\n          degree = val.exactDeg || val.deg;\n          if ($indicator && (!_this.isAnimatingHands || key === 'second')) {\n            if (degree > 20 && degree < 30) {\n              _this[\"\" + key + \"Loop\"] = false;\n            }\n            if (degree > 0 && degree < 20 && !_this[\"\" + key + \"Loop\"]) {\n              _this[\"\" + key + \"Loop\"] = degree;\n              $indicator.addClass('no-transition');\n              return defer(function() {\n                _this.updateIndicatorAnalog($indicator, 0, 1);\n                return defer(function() {\n                  $indicator.removeClass('no-transition');\n                  return defer(function() {\n                    return _this.updateIndicatorAnalog($indicator, degree, multiplier);\n                  });\n                });\n              });\n            } else {\n              return _this.updateIndicatorAnalog($indicator, degree, multiplier);\n            }\n          }\n        });\n      };\n\n      Clocker.prototype.updateIndicatorAnalog = function($indicator, deg, multiplier) {\n        return $indicator.css(this.prefixVendor('transform', \"rotate(\" + (deg * multiplier) + \"deg)\"));\n      };\n\n      Clocker.prototype.getRawTime = function() {\n        var now, utc;\n        now = new Date();\n        if (this.offsetTimezone !== false) {\n          utc = now.getTime() + now.getTimezoneOffset() * 60000;\n          now = new Date(utc + 3600000 * this.offsetTimezone);\n        }\n        this.oldTime = now;\n        return now;\n      };\n\n      Clocker.prototype.getTime = function() {\n        var d, day, exactH, exactM, exactS, h, m, mil, now, s, time;\n        now = this.getRawTime();\n        day = now.getDay();\n        d = now.getDate();\n        h = now.getHours();\n        m = now.getMinutes();\n        s = now.getSeconds();\n        mil = now.getMilliseconds();\n        exactS = s + mil / 1000;\n        exactM = m + exactS / 60;\n        exactH = h + exactM / 60;\n        exactM = exactM + h * 60;\n        if (this.settings.digital && !this.settings.militaryTime) {\n          h = h % 12 || 12;\n        }\n        return time = {\n          day: {\n            val: day,\n            deg: this.valToDeg(day, 7)\n          },\n          date: {\n            val: d,\n            deg: this.valToDeg(d - 1, 31)\n          },\n          hour: {\n            val: h,\n            deg: this.valToDeg(h, 12),\n            exactDeg: this.valToDeg(exactH, 12)\n          },\n          minute: {\n            val: m,\n            deg: this.valToDeg(m, 60),\n            exactDeg: this.valToDeg(exactM, 60)\n          },\n          second: {\n            val: s,\n            deg: this.valToDeg(s, 60)\n          }\n        };\n      };\n\n      Clocker.prototype.dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n      Clocker.prototype.valToDeg = function(val, total) {\n        return (360 * val / total) || 360;\n      };\n\n      Clocker.prototype.prefixVendor = function(property, val) {\n        var prefix, properties, _fn, _i, _len, _ref;\n        properties = {\n          property: val\n        };\n        _ref = this.cssVendorPrefixes;\n        _fn = function(prefix) {\n          return properties[\"\" + prefix + \"-\" + property] = val;\n        };\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          prefix = _ref[_i];\n          _fn(prefix);\n        }\n        return properties;\n      };\n\n      Clocker.prototype.cssVendorPrefixes = ['-webkit', '-moz', '-ms', '-o'];\n\n      return Clocker;\n\n    })();\n    defer = function(callback) {\n      return setTimeout(callback, 1);\n    };\n    return jQuery.fn.clocker = function(options) {\n      var clocker;\n      clocker = new Clocker(this, options);\n      return clocker;\n    };\n  })(jQuery);\n\n  (function() {\n    var fnames, ftypes, head, mce_init_form, mce_preload_check, mce_preload_checks, mce_success_cb;\n    mce_preload_check = function() {\n      var err, script, validatorLoaded;\n      if (mce_preload_checks > 40) {\n        return;\n      }\n      mce_preload_checks++;\n      script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"http://downloads.mailchimp.com/js/jquery.form-n-validate.js\";\n      head.appendChild(script);\n      try {\n        validatorLoaded = $(\"#fake-form\").validate({});\n      } catch (_error) {\n        err = _error;\n        setTimeout((function() {\n          return mce_preload_check();\n        }), 250);\n        return;\n      }\n      return mce_init_form();\n    };\n    mce_init_form = function() {\n      return $(function() {\n        var $signupForm, mce_validator, options;\n        $signupForm = $('#signup-form');\n        options = {\n          errorClass: \"mce_inline_error\",\n          errorElement: \"div\",\n          onkeyup: function() {},\n          onfocusout: function() {},\n          onblur: function() {}\n        };\n        mce_validator = $signupForm.validate(options);\n        $signupForm.unbind(\"submit\");\n        options = {\n          url: \"http://catalytic-design.us2.list-manage1.com/subscribe/post-json?u=e9312d1e7264ab780493019da&id=26b7366e0d&c=?\",\n          type: \"GET\",\n          dataType: \"json\",\n          contentType: \"application/json; charset=utf-8\",\n          success: mce_success_cb\n        };\n        return $signupForm.ajaxForm(options);\n      });\n    };\n    mce_success_cb = function(resp) {\n      var e, i, index, msg, parts;\n      if (resp.result === \"success\") {\n        return $('#signup-form').parent().addClass('submitted');\n      } else {\n        index = -1;\n        msg = void 0;\n        try {\n          parts = resp.msg.split(\" - \", 2);\n          if (parts[1] === undefined) {\n            msg = resp.msg;\n          } else {\n            i = parseInt(parts[0]);\n            if (i.toString() === parts[0]) {\n              index = parts[0];\n              msg = parts[1];\n            } else {\n              index = -1;\n              msg = resp.msg;\n            }\n          }\n        } catch (_error) {\n          e = _error;\n          index = -1;\n          msg = resp.msg;\n        }\n        return alert(msg);\n      }\n    };\n    fnames = new Array();\n    ftypes = new Array();\n    fnames[0] = \"EMAIL\";\n    ftypes[0] = \"email\";\n    head = document.getElementsByTagName(\"head\")[0];\n    setTimeout((function() {\n      return mce_preload_check();\n    }), 250);\n    return mce_preload_checks = 0;\n  })();\n\n}).call(this);\n"}